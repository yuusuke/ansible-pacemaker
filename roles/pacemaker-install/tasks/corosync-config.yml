- name: create corosync.conf for multicast
  template:
    src="corosync.conf.j2"
    dest="/etc/corosync/corosync.conf"
  when: TRANSPORT is not defined or TRANSPORT != "udpu"

- name: create corosync.conf for unicast
  template:
    src="corosync.conf-udpu.j2"
    dest="/etc/corosync/corosync.conf"
  when: TRANSPORT is defined and TRANSPORT == "udpu"

- name: generate authkey on the first host
  shell: /usr/sbin/corosync-keygen -l
  args:
    creates: /etc/corosync/authkey
  when: inventory_hostname == ansible_play_hosts[0]

## synchronize module requires rsync and ssh keys exchange
#- name: distribute authkey to other nodes
#  synchronize:
#    src: /etc/corosync/authkey
#    dest: /etc/corosync/authkey
#  delegate_to: "{{ ansible_play_hosts[0] }}"

## alternative way to synchronize authkey to avoid dependency on rsync
- name: fetch authkey to local temporally
  fetch:
    src: /etc/corosync/authkey
    dest: "{{ role_path }}/files/authkey"
    fail_on_missing: yes
    flat: yes
  when: inventory_hostname == ansible_play_hosts[0]
  changed_when: false

- name: distribute authkey to all nodes
  copy:
    src="{{ role_path }}/files/authkey"
    dest=/etc/corosync/authkey

- name: remove copied authkey in local
  local_action: file name="{{ role_path }}/files/authkey" state=absent
  run_once: true
  changed_when: false
